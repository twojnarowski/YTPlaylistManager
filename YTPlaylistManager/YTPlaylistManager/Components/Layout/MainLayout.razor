@using YTPlaylistManager.Components.Account.Shared
@inherits LayoutComponentBase
@implements IDisposable

@inject NavigationManager NavigationManager

<RadzenLayout>
    <RadzenHeader>
        <RadzenLabel Text="YTPlaylistManager" />
        <AuthorizeView>
            <NotAuthorized>
                <ExternalLoginPicker />
            </NotAuthorized>
            <Authorized>
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
                    <RadzenSidebarToggle Click="@(() => sidebar1Expanded = !sidebar1Expanded)" />
                </RadzenStack>
                <RadzenPanelMenuItem Text="@context.User.Identity?.Name" Icon="home" Path="Account/Manage" />
                <form action="Account/Logout" method="post">
                    <AntiforgeryToken />
                    <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                    <button type="submit" class="nav-link">
                        <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
                    </button>
                </form>
            </Authorized>
        </AuthorizeView>
    </RadzenHeader>
    <RadzenSidebar @bind-Expanded="@sidebar1Expanded">
        <AuthorizeView>
            <Authorized>
                <RadzenPanelMenu>

                    <RadzenPanelMenuItem Text="Auth" Icon="account_box" Path="Auth" />
                </RadzenPanelMenu>

            </Authorized>
        </AuthorizeView>
    </RadzenSidebar>
    <RadzenBody>
        <div class="rz-p-4">
            @Body
        </div>
    </RadzenBody>
    <RadzenFooter>
        Footer
    </RadzenFooter>
</RadzenLayout>
<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>
@code {
    bool sidebar1Expanded = true;
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}