@page "/myplaylist/{Id}"
@using Google.Apis.Auth.OAuth2
@using Google.Apis.Services
@using Google.Apis.Util.Store
@using Google.Apis.YouTube.v3
@using Google.Apis.Upload;
@using Google.Apis.YouTube.v3.Data;
@inject IConfiguration configuration;
@rendermode RenderMode.InteractiveServer
<h3>MyPlaylist - @(Id ?? "error")</h3>
<RadzenTextBox @bind-Value="playlist.Snippet.Title"></RadzenTextBox>
<button @onclick="@Test">test</button>
<RadzenButton Click=@(args => UpdatePlaylistTitle()) Text="Save"></RadzenButton>@status

@foreach (var item in items)
{
    <p>@item</p>
}

@code {
    [Parameter]
    public string Id { get; set; }

    private string _playlistName;

    private string status = string.Empty;

    Playlist playlist = new()
        {
            Snippet = new(),
        };

    public List<string> items = new();

    protected override async Task OnInitializedAsync()
    {
        var applicationName = "YT Playlist Manager";
        var secrets = new ClientSecrets
            {
                ClientId = configuration["Authentication:Google:ClientId"],
                ClientSecret = configuration["Authentication:Google:ClientSecret"],
            };

        UserCredential credential = await GoogleWebAuthorizationBroker.AuthorizeAsync(
            secrets,
            new[] { YouTubeService.Scope.YoutubeReadonly },
            "Tymonello",
            CancellationToken.None,
            new FileDataStore(applicationName)
        );

        var youtubeService = new YouTubeService(new BaseClientService.Initializer()
            {
                HttpClientInitializer = credential,
                ApplicationName = applicationName,
            });

        var playlistItemsListRequest = youtubeService.PlaylistItems.List("snippet,contentDetails");
        playlistItemsListRequest.PlaylistId = Id;
        playlistItemsListRequest.MaxResults = 50;
        var playlistItemsListResponse = playlistItemsListRequest.Execute();

        var playlistRequest = youtubeService.Playlists.List("snippet,contentDetails");
        playlistRequest.Id = Id;
        var playlistResponse = await playlistRequest.ExecuteAsync();
        playlist = playlistResponse.Items.First();

        foreach (var playlistItem in playlistItemsListResponse.Items)
        {
            items.Add(playlistItem.Snippet.Title);
        }

    }

    private void Test()
    {
        Console.WriteLine("test");
    }

    private async Task UpdatePlaylistTitle()
    {
        var applicationName = "YT Playlist Manager";
        var secrets = new ClientSecrets
            {
                ClientId = configuration["Authentication:Google:ClientId"],
                ClientSecret = configuration["Authentication:Google:ClientSecret"],
            };

        UserCredential credential = await GoogleWebAuthorizationBroker.AuthorizeAsync(
            secrets,
            new[] { YouTubeService.Scope.Youtube },
            "Tymonello",
            CancellationToken.None,
            new FileDataStore(applicationName)
        );

        var youtubeService = new YouTubeService(new BaseClientService.Initializer()
            {
                HttpClientInitializer = credential,
                ApplicationName = applicationName,
            });

        var result = await youtubeService.Playlists.Update(playlist, "snippet").ExecuteAsync();

        if (result.Snippet.Title == playlist.Snippet.Title)
        {
            status = "Great success!";
        }
        else
        {
            status = "Wrong!";
        }
        StateHasChanged();
    }
}
