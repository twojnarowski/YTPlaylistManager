@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using YTPlaylistManager.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityRedirectManager RedirectManager

<style>
    .google-signin-button {
        background-color: #ffffff;
        border: 1px solid #db4437;
        border-radius: 4px;
        color: #db4437;
        cursor: pointer;
        display: inline-flex;
        align-items: center;
        padding: 10px 16px;
        font-size: 14px;
        font-weight: 500;
        transition: background-color 0.3s ease, color 0.3s ease;
    }

        .google-signin-button:hover {
            background-color: #f8f9fa;
        }

    .google-icon {
        background: url('https://developers.google.com/identity/images/g-logo.png') no-repeat;
        background-size: contain;
        width: 18px;
        height: 18px;
        margin-right: 10px;
    }

    .button-text {
        margin-left: auto;
    }

</style>

@if (externalLogins.Length > 0)
{
    <form action="Account/PerformExternalLogin" method="post">
        <div>
            <AntiforgeryToken />
            <input type="hidden" name="ReturnUrl" value="@ReturnUrl" />
            @foreach (var provider in externalLogins)
            {
                <button class="google-signin-button" type="submit" name="provider" value="@provider.Name">
                    <span class="google-icon"></span>
                    <span class="button-text">Sign in with Google</span>
                </button>
            }
        </div>
    </form>
}

@code {
    private AuthenticationScheme[] externalLogins = [];

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        externalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).ToArray();
    }
}
